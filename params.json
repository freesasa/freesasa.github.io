{"name":"Freesasa","tagline":"C-library for calculating Solvent Accessible Surface Areas","body":"FreeSASA\r\n=======\r\n\r\nC-library for calculating Solvent Accessible Surface Areas.\r\n\r\nLicense: GPLv3 (see file COPYING). Copyright: Simon Mitternacht 2013-2015.\r\n\r\nThe library includes the algorithms by Lee & Richards and Shrake &\r\nRupley. Verification has been done by comparing the results of the two\r\ncalculations and by visual inspection of the surfaces found by them\r\n(and comparing with analytic results in the two-atom case). For high\r\nresolution versions of the algorithms, the calculations give identical\r\nresults.\r\n\r\nThe OONS atom-classification and radii are used by default ([Ooi et al.\r\nPNAS 1987, 84: 3086](http://www.ncbi.nlm.nih.gov/pmc/articles/PMC304812/)). \r\nUsers can also provide their own atomic radii; example config-files for \r\nNACCESS \r\n([Hubbard & Thornton 1993](http://www.bioinf.manchester.ac.uk/naccess/)) \r\nand OONS are available in the directory `share`. \r\n\r\nThe library is still a work in progress, but, the calculations have been \r\nverified to give correct results for a large number of proteins. Therefore, \r\nthe commandline tool can be considered reliable and stable. Planned changes \r\nmainly include refining the API, adding more options to the commandline\r\ntool and expanding the Python bindings.\r\n\r\nDocumentation\r\n-------------\r\n\r\nA regular build generates a manual (in \r\n[doc/manual.pdf](http://mittinatten.github.io/freesasa/manual.pdf)) with \r\nexamples and explanation of how to use the commandline tool and the API, \r\nand a\r\n[full reference manual](http://mittinatten.github.io/freesasa/doxygen/)\r\ncan be built using Doxygen (if available). Both are also available from \r\nthe GitHub-pages at http://mittinatten.github.io/freesasa/. \r\n\r\nAfter building the package, calling\r\n\r\n    freesasa -h\r\n    \r\nexplains how the commandline tool can be used.\r\n\r\nCompatibility\r\n-------------\r\n\r\nHas been tested successfully with several versions of GNU C Compiler\r\nand Clang/LLVM. Building the library only requires standard C and GNU\r\nlibraries.  Developers who want to do testing need to install the\r\nCheck unit testing framework.  Building the full reference manual\r\nrequires Doxygen (version > 1.8.8), and the 'regular' manual, LaTeX.\r\n\r\nCompiling and installing\r\n------------------------\r\n\r\nCan be compiled and installed using the following\r\n\r\n    ./configure\r\n    make && make install\r\n\r\nThe program freesasa provides a command-line interface, the command\r\n`freesasa -h` gives an overview of options. If downloaded from the\r\ngit repository the configure-script needs to be set up first using \r\n`autoreconf -i`.\r\n\r\nProfiling has shown that configuring with \r\n\r\n    ./configure CFLAGS='-ffast-math -funroll-loops -O3' \r\n\r\nincreases the speed of the Shrake & Rupley algorithm significantly (10\r\n% or so), as compared to the standard \"-O2\". There seems to be no\r\nmeasurable effect on Lee & Richards.\r\n\r\nTo enable gcov to measure coverage of tests, run \r\n`./configure --enable-gcov`.\r\n","google":"UA-66397346-1","note":"Don't delete this file! It's used internally to help with page regeneration."}